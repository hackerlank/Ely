#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass scrbook
\options bibliography=totoc,index=totoc
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command bibtex
\index_command makeindex
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Ely Manual
\end_layout

\begin_layout Author
by consultit
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
consultit@katamail.com
\end_layout

\end_inset


\end_layout

\begin_layout Date
27/09/2015
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Chapter
Ely Introduction
\end_layout

\begin_layout Standard
Ely is a framework for developing games.
 It's based on the 
\begin_inset CommandInset href
LatexCommand href
name "Panda3d Game Engine"
target "http://www.panda3d.org/"

\end_inset

.
\end_layout

\begin_layout Standard
It is a 
\shape italic
Data Driven
\shape default
 and 
\shape italic
Component Based
\shape default
 framework written in C++.
 
\end_layout

\begin_layout Standard
The aim of Ely is to automate as much as possible the job to create a game,
 by relegating common and repetitive game structures to 
\shape italic
components
\shape default
.
\end_layout

\begin_layout Standard
The component's task is to give a game object a particular behavior in a
 given operative area.
 This behavior can be configured through a set of parameters supplied by
 configuration files.
\end_layout

\begin_layout Standard
Ely's 
\shape italic
Object Model
\shape default
 design has been freely inspired by the 
\shape italic
Chris Stoy
\shape default
 article 
\begin_inset Quotes eld
\end_inset


\shape italic
Game Object Component System
\shape default

\begin_inset Quotes erd
\end_inset

 in "
\shape italic
Game Programming Gems 6
\shape default
" book 
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset

.
\end_layout

\begin_layout Standard
Ely framework is designed to be extensible, by creating new components in
 existing or new areas.
 
\end_layout

\begin_layout Standard
The framework library lies inside the C++ 
\family typewriter
ely
\family default
 namespace.
\end_layout

\begin_layout Chapter
Conceptual Object Model
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
object model
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "chap:Object-Model"

\end_inset


\end_layout

\begin_layout Standard
A game 
\shape smallcaps
object
\shape default
 
\begin_inset CommandInset ref
LatexCommand eqref
reference "sec:Object"

\end_inset

 is made up of a set of 
\shape smallcaps
component
\shape default
s 
\begin_inset CommandInset ref
LatexCommand eqref
reference "sec:Component"

\end_inset

.
 Each 
\shape smallcaps
component
\shape default
 gives the 
\shape smallcaps
Object
\shape default
 a particular behavior in a specific area: for example a 
\family typewriter
ely::RigidBody
\family default
 
\shape smallcaps
component
\shape default
 gives an 
\shape smallcaps
object
\shape default
 a rigid body behavior in the 
\shape italic
Physics
\shape default
 area, or the 
\family typewriter
ely::Sound3d
\family default
 
\shape smallcaps
component
\shape default
 makes an 
\shape smallcaps
object
\shape default
 able to emit sounds and belongs to the 
\shape italic
Audio
\shape default
 area.
 
\end_layout

\begin_layout Standard
In this discussion, we use the following typographical conventions:
\end_layout

\begin_layout Itemize

\shape smallcaps
small
\shape default
 
\shape smallcaps
caps
\shape default
 used for a conceptual entity (like 
\shape smallcaps
component
\shape default
 and 
\shape smallcaps
object
\shape default
)
\end_layout

\begin_layout Itemize

\family typewriter
typewriter
\family default
 used for implementation of conceptual entities (like 
\family typewriter
ely::Component 
\family default
and 
\family typewriter
ely::Object
\family default
)
\end_layout

\begin_layout Section
Component
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
component
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:Component"

\end_inset


\end_layout

\begin_layout Standard
A 
\shape smallcaps
component
\shape default
 is the building block of an 
\shape smallcaps
object
\shape default
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Object"

\end_inset

.
 
\end_layout

\begin_layout Standard
An 
\shape smallcaps
object
\shape default
 is composed 
\shape italic
exclusively
\shape default
 of 
\shape smallcaps
component
\shape default
s.
 Therefore the 
\shape smallcaps
object
\shape default
 structure and its behavior are completely determined by its 
\shape smallcaps
component
\shape default
s, their inter-relationships and interactions among them.
\end_layout

\begin_layout Standard
A 
\shape smallcaps
component
\shape default
 is distinguished by its 
\shape smallcaps
type
\shape italic

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\shape up
component ! type
\end_layout

\end_inset


\shape default
, which defines its structure, its behavior and the states it can assume.
 
\end_layout

\begin_layout Standard
Furthermore a 
\shape smallcaps
component
\shape default
 belongs to a 
\shape smallcaps
family type
\shape default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
component ! family type
\end_layout

\end_inset

, which represents a set of 
\shape smallcaps
component
\shape default
s that have conceptually related but 
\shape italic
mutually exclusive 
\shape default
behaviors in a given area
\shape italic
.
\end_layout

\begin_layout Standard
Any 
\shape smallcaps
object
\shape default
 can have 
\shape italic
only
\shape default
 one 
\shape smallcaps
component
\shape default
 of a specific 
\shape smallcaps
family type
\shape default
.
 That is, two 
\shape smallcaps
component
\shape default
s with different 
\shape smallcaps
type
\shape default
 but inside the same 
\shape smallcaps
family type
\shape default
, cannot coexist into the same 
\shape smallcaps
object
\shape default
.
\end_layout

\begin_layout Standard
Each 
\shape smallcaps
component
\shape default
 is identified by a 
\shape smallcaps
identifier
\shape default
 (
\shape smallcaps
id
\shape default
), which is assigned at creation time and is unique between all 
\shape smallcaps
component
\shape default
s of all 
\shape smallcaps
object
\shape default
s participating in the game.
\end_layout

\begin_layout Standard
A 
\shape smallcaps
component
\shape default
 is given the ability to 
\shape italic
update
\shape default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
component ! update
\end_layout

\end_inset

 its state at every tick (or frame) of the game loop.
\end_layout

\begin_layout Standard
A 
\shape smallcaps
component
\shape default
 is created and initialized by the corresponding
\shape smallcaps
 component template
\shape default
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Component-Template"

\end_inset

.
\end_layout

\begin_layout Subsection
event handling
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
component ! event handling
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sub:Component-event-handling"

\end_inset


\end_layout

\begin_layout Standard
A 
\shape smallcaps
component
\shape default
 can respond to Panda3d
\shape italic
 event
\shape default
s (stimuli).
 This is the only way an 
\shape smallcaps
object
\shape default
 is allowed to reply to events: through its 
\shape smallcaps
component
\shape default
s.
 
\end_layout

\begin_layout Standard
All 
\shape smallcaps
object
\shape default
s of a given type (i.e.
 generated from the same 
\shape smallcaps
object template
\shape default
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Object-Template"

\end_inset

) are supposed to behave in a 
\shape italic
similar
\shape default
 
\shape italic
way
\shape default
.
 Accordingly their owned 
\shape smallcaps
component
\shape default
s, having the same 
\shape smallcaps
type
\shape default
, should handle the same set of 
\shape italic
event
\shape default
 
\shape italic
types
\shape default

\begin_inset CommandInset label
LatexCommand label
name "event-types"

\end_inset

 and in a similar way.
 So, by default, the single event type is combined with a single 
\shape italic
event callback
\shape default
 
\shape italic
function
\shape default
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Event-callback-functions"

\end_inset

, which can be registered and unregistered with the Panda3D global 
\shape italic
EventHandler
\shape default
.
 The 
\shape smallcaps
component
\shape default
 is passed as argument to the event callback function: in this way one can
 differentiate the answer according to both the specific 
\shape smallcaps
component
\shape default
 and, indirectly, its owner 
\shape smallcaps
object
\shape default
.
\end_layout

\begin_layout Standard
Usually, however, different 
\shape smallcaps
object
\shape default
s of the same type need to respond independently to the same event type
 and handle it in a custom way.
 This is accomplished by associating a different Panda3d event to the same
 event type and by specifying a custom event callback function on a per
 ( 
\shape smallcaps
object
\shape default
,
\shape smallcaps
component
\shape default
, event type) triple basis: in this way, for example, 2 different 
\shape smallcaps
object
\shape default
s of the same type, each having a 
\shape smallcaps
component
\shape default
 of the same type, will respond to the same event type, each with a different
 event Panda3D and with the same event callback function, but with 2 different
\shape smallcaps
 component
\shape default
 as arguments
\end_layout

\begin_layout Subsection
interface
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
component ! interface
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sub:Component-interface"

\end_inset


\end_layout

\begin_layout Standard
The behavior of any 
\shape smallcaps
component
\shape default
 is determined by its 
\shape italic
interface
\shape default
, which is formed by a series of methods.
\end_layout

\begin_layout Standard
The 
\shape italic
protected
\shape default
 interface is called 
\shape italic
only
\shape default
 by its corresponding 
\shape smallcaps
component template
\shape default
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Component-Template"

\end_inset

and by
\shape smallcaps
 object template manager
\shape default
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Object-Template-Manager"

\end_inset

.
 The 
\shape italic
public
\shape default
 interface is used for interaction with external user code.
 Whereas, into 
\shape italic
private
\shape default
 interface, are relegated some helper functions that are delegated by the
 protected and public functions to do the real job.
\end_layout

\begin_layout Standard
The protected interface common to all 
\shape smallcaps
component
\shape default
s includes methods to:
\end_layout

\begin_layout Itemize
initialize a 
\shape smallcaps
component
\shape default
 at creation time, using the data values specified in the corresponding
 
\shape smallcaps
template
\shape default
 parameter table 
\begin_inset CommandInset ref
LatexCommand ref
reference "component-template-parameter-table"

\end_inset


\end_layout

\begin_layout Itemize
let
\shape smallcaps
 component
\shape default
 make additional setup/cleanup while being added/removed to/from the owner
 
\shape smallcaps
object
\shape default
 and to/from the game scene.
\end_layout

\begin_layout Standard
In addition, there are protected members used as helpers to set the
\shape smallcaps
 component ID
\shape default
, a reference to its owner 
\shape smallcaps
object
\shape default
 and to register and unregister event callbacks functions.
\end_layout

\begin_layout Standard
The common public interface has methods to:
\end_layout

\begin_layout Itemize
get the 
\shape smallcaps
type,
\shape default
 
\shape smallcaps
family type
\shape default
, 
\shape smallcaps
id
\shape default
 and reference to owner 
\shape smallcaps
object
\shape default
 of the 
\shape smallcaps
component
\end_layout

\begin_layout Itemize
update the 
\shape smallcaps
component 
\shape default
state at each game tick (frame)
\end_layout

\begin_layout Itemize
get the event type of a Panda3d event received 
\end_layout

\begin_layout Standard
Obviously any 
\shape smallcaps
component
\shape default
 of a given 
\shape smallcaps
type
\shape default
, usually would specialize and extend this basic common interface, depending
 on its specific behavior.
\end_layout

\begin_layout Subsection
state
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
component ! state
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:Component-state"

\end_inset


\end_layout

\begin_layout Standard
At any point in time, a 
\shape smallcaps
component
\shape default
 has an
\shape italic
 state
\shape default
, which determines its particular configuration and behavior (and consequently
 those of its owner 
\shape smallcaps
object
\shape default
).
 The state is made up a set of internal 
\shape italic
data
\shape default
, each one having its own type and value.
\end_layout

\begin_layout Standard
Some internal data values can be set up only at 
\shape smallcaps
component
\shape default
 creation time and cannot be changed during its lifetime, while others haven't
 this limitation, and can be modified through 
\shape smallcaps
component
\shape default
 methods.
 
\end_layout

\begin_layout Standard
During lifetime, many 
\shape smallcaps
component
\shape default
 
\shape smallcaps
type
\shape default
s require their state's data to be updated at each tick/frame, while others
 haven't this need (their states can possibly change only through methods'
 calls).
\end_layout

\begin_layout Standard
Moreover all internal data have hard-coded 
\shape italic
default
\shape default
 
\shape italic
values
\shape default
, which are used if not specified at creation and/or during lifetime of
 the 
\shape smallcaps
component
\shape default
.
 A default value is usually the 
\shape italic
null
\shape default
 element of the field of values of the data type, e.g.
 
\family typewriter
0
\family default
 for numbers (floats, integers), empty string (
\family typewriter
''
\family default
) for strings etc\SpecialChar \ldots{}
.
 But some data must have a different default values from null, otherwise
 the 
\shape smallcaps
component
\shape default
 could fall back in an inconsistent behavior.
\end_layout

\begin_layout Standard
A 
\shape smallcaps
component
\shape default
 state includes also the sets of (
\shape italic
event
\shape default
, 
\shape italic
event-type
\shape default
) pairs and (
\shape italic
event-type
\shape default
, 
\shape italic
event-callback
\shape default
) pairs which the 
\shape smallcaps
component
\shape default
 use for event handling 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Component-event-handling"

\end_inset

.
 These data sets can be set up only at creation time.
\end_layout

\begin_layout Subsection

\series bold
Implementation
\begin_inset CommandInset label
LatexCommand label
name "sub:Component-Implementation"

\end_inset


\end_layout

\begin_layout Quote
The 
\shape smallcaps
component
\shape default
 entities are modeled by a shallow class hierarchy.
\end_layout

\begin_layout Quote
The common interface and internal state are declared into the 
\family typewriter
ely::Component
\family default
 abstract base class, while 
\shape smallcaps
component
\shape default
s of any 
\shape smallcaps
type
\shape default
, are modeled by specific concrete classes derived from 
\family typewriter
ely::Component
\family default
.
 These classes must implement all 
\family typewriter
ely::Component
\family default
's pure virtual member functions, and, possibly, would extend and/or specialize
 (by overriding its virtual member functions) its interface 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Component-interface"

\end_inset

 and internal state 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Component-state"

\end_inset

.
 Instances of these concrete classes represent 
\shape smallcaps
component
\shape default
 entities.
\end_layout

\begin_layout Quote

\shape smallcaps
component
\shape default
's 
\shape smallcaps
type
\shape default
, 
\shape smallcaps
family
\shape default
 
\shape smallcaps
type
\shape default
 and 
\shape smallcaps
id
\shape default
 are implemented by 
\family typewriter
ely::ComponentType
\family default
, 
\family typewriter
ely::ComponentFamilyType
\family default
 and 
\family typewriter
ely::ComponentId
\family default
 types respectively.
\end_layout

\begin_layout Quote
The common 
\shape italic
protected
\shape default
 interface includes, among others, this member functions:
\end_layout

\begin_layout Itemize

\family typewriter
reset()
\family default
 to set a 
\shape smallcaps
component
\shape default
 state's data members to some default values.
 This member is pure virtual and must be implemented by derived concrete
 classes to perform custom resets.
\end_layout

\begin_layout Itemize

\family typewriter
initialize()
\family default
 to allow a 
\shape smallcaps
component
\shape default
 to be initialized.
 This member is pure virtual and must be implemented by derived concrete
 classes to perform custom initialization.
 It is called by 
\family typewriter
ely::ComponentTemplate::makeComponent()
\family default
 implementation of the related 
\shape smallcaps
component template
\shape default
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Component-Template-Implementation"

\end_inset

.
 
\end_layout

\begin_layout Standard
Moreover, other protected members functions let 
\shape smallcaps
component
\shape default
s to perform additional setup/cleanup when they are being added/removed
 to/from an 
\shape smallcaps
object
\shape default
s and to/from the game scene (they are called by 
\family typewriter
createObject()
\family default
/
\family typewriter
 destroyObject()
\family default
 and 
\family typewriter
addComponentToObject()
\family default
/
\family typewriter
 removeComponentFromObject()
\family default
 member functions of 
\family typewriter
ely::ObjectTemplateManager
\family default
.
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Object-Template-Manager-Implementation"

\end_inset

, which carry on the actual additions/removals).
 They are:
\end_layout

\begin_layout Itemize

\family typewriter
addToObjectSetup()
\family default
/
\family typewriter
 removeFromObjectCleanup()
\family default
 and 
\family typewriter
addToSceneSetup()
\family default
/ 
\family typewriter
removeFromSceneCleanup()
\family default
 which perform the setup/cleanup common of all 
\shape smallcaps
component
\shape default
s.
 These, in turn, call the additional member functions 
\family typewriter
onAddToObjectSetup()
\family default
/
\family typewriter
 onRemoveFromObjectCleanup()
\family default
 and 
\family typewriter
onAddToSceneSetup()
\family default
/
\family typewriter
 onRemoveFromSceneCleanup()
\family default
 respectively, which, being pure virtual, must be implemented by derived
 concrete classes to implement the optional custom piece of setup/cleanup.
\end_layout

\begin_layout Standard
The remaining protected member functions are used as common helpers: 
\family typewriter
setComponentId()
\family default
/
\family typewriter
 setOwnerObject()
\family default
 to set the 
\shape smallcaps
component ID
\shape default
 and a reference to its owner object respectively , 
\family typewriter
registerEventCallbacks()
\family default
/ 
\family typewriter
unregisterEventCallbacks()
\family default
 to register/unregister events' callbacks.
\end_layout

\begin_layout Quote
The common 
\shape italic
public
\shape default
 interface includes:
\end_layout

\begin_layout Itemize

\family typewriter
componentType()
\family default
/
\family typewriter
 familyType()
\family default
/
\family typewriter
 getComponentId()
\family default
/
\family typewriter
 getOwnerObject()
\family default
 to get the 
\shape smallcaps
type,
\shape default
 
\shape smallcaps
family type
\shape default
, 
\shape smallcaps
id
\shape default
 and reference to owner 
\shape smallcaps
object
\shape default
 of the 
\shape smallcaps
component
\shape default
 respectively
\end_layout

\begin_layout Itemize

\family typewriter
getEventType()
\family default
 to get the event type of a Panda3d event the 
\shape smallcaps
component
\shape default
 is supposed to respond to.
 
\end_layout

\begin_layout Itemize

\family typewriter
update()
\family default
 to possibly update the 
\shape smallcaps
component 
\shape default
state at each game tick (frame).
 It is virtual, so can possibly be overridden by derived concrete classes
 to perform specific update.
 Some derived 
\shape smallcaps
component type
\shape default
s need not to update their state, so they use the base one that does nothing.
\end_layout

\begin_layout Quote
See API Documentation 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:API-Documentation"

\end_inset

 for details.
\end_layout

\begin_layout Section
Component Template
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
component template
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:Component-Template"

\end_inset


\end_layout

\begin_layout Standard
A 
\shape smallcaps
component template
\shape default
 has the ultimate responsibility to create and initialize a 
\shape smallcaps
component
\shape default
 of a given 
\shape smallcaps
type
\shape default
 and 
\shape smallcaps
family
\shape default
 
\shape smallcaps
type
\shape default
.
 A 
\shape smallcaps
component
\shape default
 can be created 
\shape italic
only
\shape default
 through the corresponding
\shape smallcaps
 template
\shape default
.
\end_layout

\begin_layout Standard
Just after its creation, a 
\shape smallcaps
component
\shape default
 needs to be initialized and this is accomplished by setting up single and
 multiple valued 
\shape italic
configuration parameters
\shape default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
component ! configuration parameters
\end_layout

\end_inset


\shape italic
 
\shape default

\begin_inset CommandInset label
LatexCommand label
name "component-configuration-parameters"

\end_inset

, each one corresponding to a specific internal data of the 
\shape smallcaps
component
\shape default
 state 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Component-state"

\end_inset

.
 These parameters are handled by the related 
\shape smallcaps
component template
\shape default
, which stores them into an internal 
\shape italic
parameter table
\shape default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
component template ! parameter table
\end_layout

\end_inset

 
\begin_inset CommandInset label
LatexCommand label
name "component-template-parameter-table"

\end_inset

 of (
\shape italic
parameter-name, value
\shape default
) pairs.
 Both parameter
\shape italic
 
\shape default
name and value are actually specified as strings.
\end_layout

\begin_layout Standard
At game startup time, configuration
\shape italic
 
\shape default
parameters for a 
\shape smallcaps
component
\shape default
 are specified in the 
\shape italic
game configuration file
\shape default
 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Game-configuration-file"

\end_inset

 and the related 
\shape smallcaps
template
\shape default
's table is built automatically; on the other hand, when the 
\shape smallcaps
component
\shape default
 is created dynamically the table should be set up manually before its creation.
\end_layout

\begin_layout Standard

\shape smallcaps
component template
\shape default
s are handled by the 
\shape smallcaps
component template manager
\shape default
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Component-Template-Manager"

\end_inset

.
\end_layout

\begin_layout Subsection
interface
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
component template ! interface
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sub:Component-Template-interface"

\end_inset


\end_layout

\begin_layout Standard
The behavior of any 
\shape smallcaps
component template
\shape default
 is determined by its 
\shape italic
interface
\shape default
, which is formed by a series of methods.
\end_layout

\begin_layout Standard
The 
\shape italic
protected
\shape default
 interface is called 
\shape italic
only
\shape default
 from other objects of Ely framework.
 The 
\shape italic
public
\shape default
 interface is used for interaction with external user code.
 
\end_layout

\begin_layout Standard
The protected interface common to all 
\shape smallcaps
component template
\shape default
s has the method to
\end_layout

\begin_layout Itemize
create a 
\shape smallcaps
component
\shape default
 and initialize it
\end_layout

\begin_layout Standard
The common public interface includes methods to:
\end_layout

\begin_layout Itemize
get the 
\shape smallcaps
type
\shape default
 and 
\shape smallcaps
family type
\shape default
 of the 
\shape smallcaps
component
\shape default
s it can create 
\end_layout

\begin_layout Itemize
set the configuration parameters for the 
\shape smallcaps
component
\shape default
 to both default and custom values
\end_layout

\begin_layout Itemize
get both the single and the multiple valued configuration parameters for
 the 
\shape smallcaps
component
\shape default
 or a copy of the entire parameter table
\end_layout

\begin_layout Standard
A 
\shape smallcaps
component template
\shape default
 of a given 
\shape smallcaps
component type
\shape default
 would only specialize the basic common interface.
\end_layout

\begin_layout Subsection

\series bold
Implementation
\begin_inset CommandInset label
LatexCommand label
name "sub:Component-Template-Implementation"

\end_inset


\end_layout

\begin_layout Quote
The 
\shape smallcaps
component template
\shape default
 entities are modeled by a shallow class hierarchy, reflecting that of the
 corresponding 
\shape smallcaps
component
\shape default
s 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Component-Template-Manager-Implementation"

\end_inset

.
\end_layout

\begin_layout Quote
The common interface and internal state are declared into the 
\family typewriter
ely::ComponentTemplate
\family default
 abstract base class, while 
\shape smallcaps
component template
\shape default
s for
\shape smallcaps
 component
\shape default
s of any 
\shape smallcaps
type
\shape default
, are modeled by specific concrete classes derived from 
\family typewriter
ely::ComponentTemplate
\family default
.
 These classes must implement all 
\family typewriter
ely::ComponentTemplate
\family default
's pure virtual member functions.
 Instances of these concrete classes represent 
\shape smallcaps
component template
\shape default
 entities.
\end_layout

\begin_layout Quote
The common 
\shape italic
protected
\shape default
 interface is made of: 
\end_layout

\begin_layout Itemize

\family typewriter
makeComponent()
\family default
 to create the 
\shape smallcaps
component
\shape default
 of a given 
\shape smallcaps
type 
\shape default
and 
\shape smallcaps
family type
\shape default
.
 This member is pure virtual and must be implemented by derived concrete
 classes to perform custom creation.
 It is called only by 
\family typewriter
doCreateComponent()
\family default
 (private) member function of 
\family typewriter
ely::ComponentTemplateManager() 
\family default

\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Component-Template-Manager-Implementation"

\end_inset

 based on the 
\shape smallcaps
component type
\shape default
 to create.
\end_layout

\begin_layout Quote
The common 
\shape italic
public
\shape default
 interface includes:
\end_layout

\begin_layout Itemize

\family typewriter
componentType()
\family default
 and 
\family typewriter
familyType()
\family default
 to get the 
\shape smallcaps
type
\shape default
 and 
\shape smallcaps
family type
\shape default
 of the related 
\shape smallcaps
component
\shape default
 respectively.
 This members are pure virtual and must be implemented by derived concrete
 classes to set custom values of both 
\shape smallcaps
type
\shape default
s.
 
\end_layout

\begin_layout Itemize

\family typewriter
setParametersDefaults()
\family default
 to set the 
\shape smallcaps
component
\shape default
 configuration parameters to their default values.
 This member is pure virtual and must be implemented by derived concrete
 classes to do custom default parameter settings.
\end_layout

\begin_layout Itemize

\family typewriter
setParameters()
\family default
 to set the 
\shape smallcaps
component
\shape default
 configuration parameters to custom values
\end_layout

\begin_layout Itemize

\family typewriter
parameter()/ parameterList()/ getParameterTable()
\family default
 to get the configuration parameters single or multiple values for the 
\shape smallcaps
component
\shape default
 or a copy of the entire parameter table respectively.
\end_layout

\begin_layout Itemize

\family typewriter
ely::ComponentTemplate::pandaFramework()/ windowFramework()
\family default
 to get a reference to the 
\shape italic
PandaFramework
\shape default
 and 
\shape italic
WindowFramework
\shape default
 respectively
\end_layout

\begin_layout Quote
See API Documentation 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:API-Documentation"

\end_inset

 for details.
\end_layout

\begin_layout Section
Component Template Manager
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Component Template Manager
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:Component-Template-Manager"

\end_inset


\end_layout

\begin_layout Standard

\shape smallcaps
component
\shape default
 
\shape smallcaps
template
\shape default
s 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Component-Template"

\end_inset

 are handled by the 
\shape smallcaps
component template manager
\shape default
, which is a 
\shape italic
singleton
\shape default
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Singletons"

\end_inset

 global object.
 All 
\shape smallcaps
component template
\shape default
s used in the game must be stored into this manager, and they should be
 retrieved only through it.
\end_layout

\begin_layout Subsection
interface
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
component template manager ! interface
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sub:Component-template-manager-interface"

\end_inset


\end_layout

\begin_layout Standard
The behavior the 
\shape smallcaps
component template manager
\shape default
 is determined by its 
\shape italic
interface
\shape default
, which is formed by a series of methods.
\end_layout

\begin_layout Standard
The 
\shape italic
private
\shape default
 interface is called 
\shape italic
only
\shape default
 from 
\shape smallcaps
object template manager
\shape default
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Object-Template-Manager"

\end_inset

.
 The 
\shape italic
public
\shape default
 interface is used for interaction with external user code.
 
\end_layout

\begin_layout Standard
The 
\shape italic
private
\shape default
 interface has a method to:
\end_layout

\begin_layout Itemize
create a 
\shape smallcaps
component
\shape default
, given its 
\shape smallcaps
type
\shape default
, by retrieving the appropriate 
\shape smallcaps
component template
\end_layout

\begin_layout Standard
The 
\shape italic
public
\shape default
 interface include methods to:
\end_layout

\begin_layout Itemize
add/remove a 
\shape smallcaps
component template
\shape default
 into/from an internal storage
\end_layout

\begin_layout Itemize
retrieve a 
\shape smallcaps
component template 
\shape default
corresponding to a 
\shape smallcaps
component
\shape default
 
\shape smallcaps
type
\end_layout

\begin_layout Itemize
reset the 
\shape smallcaps
component
\shape default
s' configuration parameters to their default values (configuration parameters
 are handled by 
\shape smallcaps
component
\shape default
 
\shape smallcaps
template
\shape default
s 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Component-Template"

\end_inset

).
\end_layout

\begin_layout Subsection

\series bold
Implementation
\begin_inset CommandInset label
LatexCommand label
name "sub:Component-Template-Manager-Implementation"

\end_inset


\end_layout

\begin_layout Quote
The 
\shape smallcaps
component template manager
\shape default
 singleton is modeled by 
\family typewriter
ely::ComponentTemplateManager
\family default
 class.
\end_layout

\begin_layout Quote
The 
\shape italic
private
\shape default
 interface is made of:
\end_layout

\begin_layout Itemize

\family typewriter
doCreateComponent()
\family default
 to create the 
\shape smallcaps
component
\shape default
 given its 
\shape smallcaps
type
\shape default
.
 It called only by 
\family typewriter
createObject()
\family default
 and 
\family typewriter
addComponentToObject()
\family default
 member functions of 
\family typewriter
ely::ObjectTemplateManager
\family default
.
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Object-Template-Manager-Implementation"

\end_inset

, when carrying on the actual 
\shape smallcaps
component
\shape default
 addition to an 
\shape smallcaps
object
\shape default
.
\end_layout

\begin_layout Quote
The 
\shape italic
public
\shape default
 interface includes:
\end_layout

\begin_layout Itemize

\family typewriter
addComponentTemplate()
\family default
/
\family typewriter
 removeComponentTemplate()
\family default
 to add/remove a 
\shape smallcaps
component template
\shape default
 into/from the internal storage.
\end_layout

\begin_layout Itemize

\family typewriter
getComponentTemplate()
\family default
 to retrieve a 
\shape smallcaps
component template 
\shape default
corresponding to a 
\shape smallcaps
component
\shape default
 
\shape smallcaps
type.
\end_layout

\begin_layout Itemize

\family typewriter
resetComponentTemplateParams()
\family default
/
\family typewriter
 resetComponentTemplatesParams()
\family default
 to reset one/all 
\shape smallcaps
component
\shape default
s' configuration parameters to their default values.
\end_layout

\begin_layout Quote
See API Documentation 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:API-Documentation"

\end_inset

 for details.
\end_layout

\begin_layout Section
Object
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
object
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:Object"

\end_inset


\end_layout

\begin_layout Standard
A game is composed 
\shape italic
exclusively
\shape default
 of a set of 
\shape smallcaps
object
\shape default
s.
 Therefore the game structure and its behavior are completely determined
 by its 
\shape smallcaps
object
\shape default
s, their inter-relationships and interactions among them.
 As stated previously, an 
\shape smallcaps
object
\shape default
, in turn, is composed 
\shape italic
exclusively
\shape default
 of 
\shape smallcaps
component
\shape default
s 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Component"

\end_inset

.
\end_layout

\begin_layout Standard
An 
\shape smallcaps
object
\shape default
 is defined from an 
\shape smallcaps
object template
\shape default
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Object-Template"

\end_inset

, which establishes the 
\shape smallcaps
component
\shape default
s that need to be present in every 
\shape smallcaps
object
\shape default
, when it is created.
 In turn, 
\shape smallcaps
type
\shape default
s of these 
\shape smallcaps
component
\shape default
s, implicitly, identify the set of mandatory 
\shape smallcaps
family type
\shape default
s present in the 
\shape smallcaps
object
\shape default
.
 Therefore, we define the
\shape italic
 base
\shape default
 
\shape italic
type
\shape default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
object ! base type
\end_layout

\end_inset

 of an 
\shape smallcaps
object
\shape default
 as the set of 
\shape smallcaps
family type
\shape default
s identified (implicitly) by the 
\shape smallcaps
object template
\shape default
.
 
\end_layout

\begin_layout Standard
However,
\shape smallcaps
 object
\shape default
s are dynamic entities: 
\shape smallcaps
component
\shape default
s can be added/removed to/from them, during their life time.
 Consequently, we define the
\shape italic
 dynamic
\shape default
 
\shape italic
type
\shape default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
object ! dynamic type
\end_layout

\end_inset

 of an 
\shape smallcaps
object
\shape default
 as the set of 
\shape smallcaps
family type
\shape default
s which resides, at any moment, into the 
\shape smallcaps
object
\shape default
.
\end_layout

\begin_layout Standard
Additions of 
\shape smallcaps
component
\shape default
s to the 
\shape smallcaps
object
\shape default
, are always permitted.
 However, when you add a 
\shape smallcaps
component
\shape default
 having the same 
\shape smallcaps
family type
\shape default
 of one already present into the 
\shape smallcaps
object
\shape default
, the effect is to replace the old 
\shape smallcaps
component
\shape default
 with the new one, and this is a consequence of the fact that an 
\shape smallcaps
object
\shape default
 cannot contain more than one 
\shape smallcaps
component
\shape default
 with the the same 
\shape smallcaps
family type
\shape default
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Component"

\end_inset

.
\end_layout

\begin_layout Standard
Conversely, removals of 
\shape smallcaps
component
\shape default
s have the following restriction: deletion of a component whose 
\shape smallcaps
family type
\shape default
 belongs to the base type of the 
\shape smallcaps
object
\shape default
, is not allowed.
\end_layout

\begin_layout Standard
Moreover there is to say that, during both creation and life time, 
\shape smallcaps
component
\shape default
s may have a priority of adding the 
\shape smallcaps
object
\shape default
, that is a particular 
\shape smallcaps
type
\shape default
 of 
\shape smallcaps
component
\shape default
 may require the presence of one (or more) 
\shape smallcaps
component
\shape default
(s) of another 
\shape smallcaps
type
\shape default
, for its correct operation (and consequently for the 
\shape smallcaps
object
\shape default
's one).
 Therefore, the indiscriminate additions of components, especially if done
 dynamically, can lead to problems, if not properly weighted.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Itemize
----------------------------------------------------------
\end_layout

\begin_layout Standard
A 
\shape smallcaps
component
\shape default
 is the building block of an 
\shape smallcaps
object
\shape default
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Object"

\end_inset

.
 
\end_layout

\begin_layout Standard
A 
\shape smallcaps
component
\shape default
 is distinguished by its 
\shape smallcaps
type
\shape italic

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\shape up
component ! type
\end_layout

\end_inset


\shape default
, which defines its structure, its behavior and the states it can assume.
 
\end_layout

\begin_layout Standard
Furthermore a 
\shape smallcaps
component
\shape default
 belongs to a 
\shape smallcaps
family type
\shape default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
component ! family type
\end_layout

\end_inset

, which represents a set of 
\shape smallcaps
component
\shape default
s that have conceptually related but 
\shape italic
mutually exclusive 
\shape default
behaviors in a given area
\shape italic
.
\end_layout

\begin_layout Standard
Any 
\shape smallcaps
object
\shape default
 can have 
\shape italic
only
\shape default
 one 
\shape smallcaps
component
\shape default
 of a specific 
\shape smallcaps
family type
\shape default
.
 That is, two 
\shape smallcaps
component
\shape default
s with different 
\shape smallcaps
type
\shape default
 but inside the same 
\shape smallcaps
family type
\shape default
, cannot coexist into the same 
\shape smallcaps
object
\shape default
.
\end_layout

\begin_layout Standard
Each 
\shape smallcaps
component
\shape default
 is identified by a 
\shape smallcaps
identifier
\shape default
 (
\shape smallcaps
id
\shape default
), which is assigned at creation time and is unique between all 
\shape smallcaps
component
\shape default
s of all 
\shape smallcaps
object
\shape default
s participating in the game.
\end_layout

\begin_layout Standard
A 
\shape smallcaps
component
\shape default
 is given the ability to 
\shape italic
update
\shape default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
component ! update
\end_layout

\end_inset

 its state at every tick (or frame) of the game loop.
\end_layout

\begin_layout Standard
A 
\shape smallcaps
component
\shape default
 is created and initialized by the corresponding
\shape smallcaps
 component template
\shape default
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Component-Template"

\end_inset

.
\end_layout

\begin_layout Subsection
event handling
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
component ! event handling
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sub:Component-event-handling-1"

\end_inset


\end_layout

\begin_layout Standard
A 
\shape smallcaps
component
\shape default
 can respond to Panda3d
\shape italic
 event
\shape default
s (stimuli).
 This is the only way an 
\shape smallcaps
object
\shape default
 is allowed to reply to events: through its 
\shape smallcaps
component
\shape default
s.
 
\end_layout

\begin_layout Standard
All 
\shape smallcaps
object
\shape default
s of a given type (i.e.
 generated from the same 
\shape smallcaps
object template
\shape default
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Object-Template"

\end_inset

) are supposed to behave in a 
\shape italic
similar
\shape default
 
\shape italic
way
\shape default
.
 Accordingly their owned 
\shape smallcaps
component
\shape default
s, having the same 
\shape smallcaps
type
\shape default
, should handle the same set of 
\shape italic
event
\shape default
 
\shape italic
types
\shape default

\begin_inset CommandInset label
LatexCommand label
name "event-types-1"

\end_inset

 and in a similar way.
 So, by default, the single event type is combined with a single 
\shape italic
event callback
\shape default
 
\shape italic
function
\shape default
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Event-callback-functions"

\end_inset

, which can be registered and unregistered with the Panda3D global 
\shape italic
EventHandler
\shape default
.
 The 
\shape smallcaps
component
\shape default
 is passed as argument to the event callback function: in this way one can
 differentiate the answer according to both the specific 
\shape smallcaps
component
\shape default
 and, indirectly, its owner 
\shape smallcaps
object
\shape default
.
\end_layout

\begin_layout Standard
Usually, however, different 
\shape smallcaps
object
\shape default
s of the same type need to respond independently to the same event type
 and handle it in a custom way.
 This is accomplished by associating a different Panda3d event to the same
 event type and by specifying a custom event callback function on a per
 ( 
\shape smallcaps
object
\shape default
,
\shape smallcaps
component
\shape default
, event type) triple basis: in this way, for example, 2 different 
\shape smallcaps
object
\shape default
s of the same type, each having a 
\shape smallcaps
component
\shape default
 of the same type, will respond to the same event type, each with a different
 event Panda3D and with the same event callback function, but with 2 different
\shape smallcaps
 component
\shape default
 as arguments
\end_layout

\begin_layout Subsection
interface
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
component ! interface
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sub:Component-interface-1"

\end_inset


\end_layout

\begin_layout Standard
The behavior of any 
\shape smallcaps
component
\shape default
 is determined by its 
\shape italic
interface
\shape default
, which is formed by a series of methods.
\end_layout

\begin_layout Standard
The 
\shape italic
protected
\shape default
 interface is called 
\shape italic
only
\shape default
 by its corresponding 
\shape smallcaps
component template
\shape default
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Component-Template"

\end_inset

and by
\shape smallcaps
 object template manager
\shape default
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Object-Template-Manager"

\end_inset

.
 The 
\shape italic
public
\shape default
 interface is used for interaction with external user code.
 Whereas, into 
\shape italic
private
\shape default
 interface, are relegated some helper functions that are delegated by the
 protected and public functions to do the real job.
\end_layout

\begin_layout Standard
The protected interface common to all 
\shape smallcaps
component
\shape default
s includes methods to:
\end_layout

\begin_layout Itemize
initialize a 
\shape smallcaps
component
\shape default
 at creation time, using the data values specified in the corresponding
 
\shape smallcaps
template
\shape default
 parameter table 
\begin_inset CommandInset ref
LatexCommand ref
reference "component-template-parameter-table"

\end_inset


\end_layout

\begin_layout Itemize
let
\shape smallcaps
 component
\shape default
 make additional setup/cleanup while being added/removed to/from the owner
 
\shape smallcaps
object
\shape default
 and to/from the game scene.
\end_layout

\begin_layout Standard
In addition, there are protected members used as helpers to set the
\shape smallcaps
 component ID
\shape default
, a reference to its owner 
\shape smallcaps
object
\shape default
 and to register and unregister event callbacks functions.
\end_layout

\begin_layout Standard
The common public interface has methods to:
\end_layout

\begin_layout Itemize
get the 
\shape smallcaps
type,
\shape default
 
\shape smallcaps
family type
\shape default
, 
\shape smallcaps
id
\shape default
 and reference to owner 
\shape smallcaps
object
\shape default
 of the 
\shape smallcaps
component
\end_layout

\begin_layout Itemize
update the 
\shape smallcaps
component 
\shape default
state at each game tick (frame)
\end_layout

\begin_layout Itemize
get the event type of a Panda3d event received 
\end_layout

\begin_layout Standard
Obviously any 
\shape smallcaps
component
\shape default
 of a given 
\shape smallcaps
type
\shape default
, usually would specialize and extend this basic common interface, depending
 on its specific behavior.
\end_layout

\begin_layout Subsection
state
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
component ! state
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:Component-state-1"

\end_inset


\end_layout

\begin_layout Standard
At any point in time, a 
\shape smallcaps
component
\shape default
 has an
\shape italic
 state
\shape default
, which determines its particular configuration and behavior (and consequently
 those of its owner 
\shape smallcaps
object
\shape default
).
 The state is made up a set of internal 
\shape italic
data
\shape default
, each one having its own type and value.
\end_layout

\begin_layout Standard
Some internal data values can be set up only at 
\shape smallcaps
component
\shape default
 creation time and cannot be changed during its lifetime, while others haven't
 this limitation, and can be modified through 
\shape smallcaps
component
\shape default
 methods.
 
\end_layout

\begin_layout Standard
During lifetime, many 
\shape smallcaps
component
\shape default
 
\shape smallcaps
type
\shape default
s require their state's data to be updated at each tick/frame, while others
 haven't this need (their states can possibly change only through methods'
 calls).
\end_layout

\begin_layout Standard
Moreover all internal data have hard-coded 
\shape italic
default
\shape default
 
\shape italic
values
\shape default
, which are used if not specified at creation and/or during lifetime of
 the 
\shape smallcaps
component
\shape default
.
 A default value is usually the 
\shape italic
null
\shape default
 element of the field of values of the data type, e.g.
 
\family typewriter
0
\family default
 for numbers (floats, integers), empty string (
\family typewriter
''
\family default
) for strings etc\SpecialChar \ldots{}
.
 But some data must have a different default values from null, otherwise
 the 
\shape smallcaps
component
\shape default
 could fall back in an inconsistent behavior.
\end_layout

\begin_layout Standard
A 
\shape smallcaps
component
\shape default
 state includes also the sets of (
\shape italic
event
\shape default
, 
\shape italic
event-type
\shape default
) pairs and (
\shape italic
event-type
\shape default
, 
\shape italic
event-callback
\shape default
) pairs which the 
\shape smallcaps
component
\shape default
 use for event handling 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Component-event-handling-1"

\end_inset

.
 These data sets can be set up only at creation time.
\end_layout

\begin_layout Subsection

\series bold
Implementation
\begin_inset CommandInset label
LatexCommand label
name "sub:Component-Implementation-1"

\end_inset


\end_layout

\begin_layout Quote
The 
\shape smallcaps
component
\shape default
 entities are modeled by a shallow class hierarchy.
\end_layout

\begin_layout Quote
The common interface and internal state are declared into the 
\family typewriter
ely::Component
\family default
 abstract base class, while 
\shape smallcaps
component
\shape default
s of any 
\shape smallcaps
type
\shape default
, are modeled by specific concrete classes derived from 
\family typewriter
ely::Component
\family default
.
 These classes must implement all 
\family typewriter
ely::Component
\family default
's pure virtual member functions, and, possibly, would extend and/or specialize
 (by overriding its virtual member functions) its interface 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Component-interface-1"

\end_inset

 and internal state 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Component-state-1"

\end_inset

.
 Instances of these concrete classes represent 
\shape smallcaps
component
\shape default
 entities.
\end_layout

\begin_layout Quote

\shape smallcaps
component
\shape default
's 
\shape smallcaps
type
\shape default
, 
\shape smallcaps
family
\shape default
 
\shape smallcaps
type
\shape default
 and 
\shape smallcaps
id
\shape default
 are implemented by 
\family typewriter
ely::ComponentType
\family default
, 
\family typewriter
ely::ComponentFamilyType
\family default
 and 
\family typewriter
ely::ComponentId
\family default
 types respectively (currently all 
\family typewriter
typedef
\family default
s to 
\family typewriter
std::string
\family default
).
\end_layout

\begin_layout Quote
The common 
\shape italic
protected
\shape default
 interface includes, among others, this member functions:
\end_layout

\begin_layout Itemize

\family typewriter
reset()
\family default
 to set a 
\shape smallcaps
component
\shape default
 state's data members to some default values.
 This member is pure virtual and must be implemented by derived concrete
 classes to perform custom resets.
\end_layout

\begin_layout Itemize

\family typewriter
initialize()
\family default
 to allow a 
\shape smallcaps
component
\shape default
 to be initialized.
 This member is pure virtual and must be implemented by derived concrete
 classes to perform custom initialization.
 It is called by 
\family typewriter
ely::ComponentTemplate::makeComponent()
\family default
 implementation of the related 
\shape smallcaps
component template
\shape default
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Component-Template-Implementation"

\end_inset

.
 
\end_layout

\begin_layout Standard
Moreover, other protected members functions let 
\shape smallcaps
component
\shape default
s to perform additional setup/cleanup when they are being added/removed
 to/from an 
\shape smallcaps
object
\shape default
s and to/from the game scene (they are called by 
\family typewriter
createObject()
\family default
/
\family typewriter
 destroyObject()
\family default
 and 
\family typewriter
addComponentToObject()
\family default
/
\family typewriter
 removeComponentFromObject()
\family default
 member functions of 
\family typewriter
ely::ObjectTemplateManager
\family default
.
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Object-Template-Manager-Implementation"

\end_inset

, which carry on the actual additions/removals).
 They are:
\end_layout

\begin_layout Itemize

\family typewriter
addToObjectSetup()
\family default
/
\family typewriter
 removeFromObjectCleanup()
\family default
 and 
\family typewriter
addToSceneSetup()
\family default
/ 
\family typewriter
removeFromSceneCleanup()
\family default
 which perform the setup/cleanup common of all 
\shape smallcaps
component
\shape default
s.
 These, in turn, call the additional member functions 
\family typewriter
onAddToObjectSetup()
\family default
/
\family typewriter
 onRemoveFromObjectCleanup()
\family default
 and 
\family typewriter
onAddToSceneSetup()
\family default
/
\family typewriter
 onRemoveFromSceneCleanup()
\family default
 respectively, which, being pure virtual, must be implemented by derived
 concrete classes to implement the optional custom piece of setup/cleanup.
\end_layout

\begin_layout Standard
The remaining protected member functions are used as common helpers: 
\family typewriter
setComponentId()
\family default
/
\family typewriter
 setOwnerObject()
\family default
 to set the 
\shape smallcaps
component ID
\shape default
 and a reference to its owner object respectively , 
\family typewriter
registerEventCallbacks()
\family default
/ 
\family typewriter
unregisterEventCallbacks()
\family default
 to register/unregister events' callbacks.
\end_layout

\begin_layout Quote
The common 
\shape italic
public
\shape default
 interface includes:
\end_layout

\begin_layout Itemize

\family typewriter
componentType()
\family default
/
\family typewriter
 familyType()
\family default
/
\family typewriter
 getComponentId()
\family default
/
\family typewriter
 getOwnerObject()
\family default
 to get the 
\shape smallcaps
type,
\shape default
 
\shape smallcaps
family type
\shape default
, 
\shape smallcaps
id
\shape default
 and reference to owner 
\shape smallcaps
object
\shape default
 of the 
\shape smallcaps
component
\shape default
 respectively
\end_layout

\begin_layout Itemize

\family typewriter
getEventType()
\family default
 to get the event type of a Panda3d event the 
\shape smallcaps
component
\shape default
 is supposed to respond to.
 
\end_layout

\begin_layout Itemize

\family typewriter
update()
\family default
 to possibly update the 
\shape smallcaps
component 
\shape default
state at each game tick (frame).
 It is virtual, so can possibly be overridden by derived concrete classes
 to perform specific update.
 Some derived 
\shape smallcaps
component type
\shape default
s need not to update their state, so they use the base one that does nothing.
\end_layout

\begin_layout Quote
See API Documentation 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:API-Documentation"

\end_inset

 for details.
\end_layout

\begin_layout Section
Object Template
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
object ! template
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:Object-Template"

\end_inset


\end_layout

\begin_layout Standard
Objects' Templates
\end_layout

\begin_layout Section
Object Template Manager
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Object Template Manager
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:Object-Template-Manager"

\end_inset


\end_layout

\begin_layout Standard
All Objects Templates used in the game must be stored into this manager,
 because they are retrieved only through it, and Components can be created
 only from the public 
\family typewriter
ObjectTemplateManager::createObject()
\family default
member function.
\end_layout

\begin_layout Subsection

\series bold
Implementation
\begin_inset CommandInset label
LatexCommand label
name "sub:Object-Template-Manager-Implementation"

\end_inset


\end_layout

\begin_layout Quote
The 
\shape smallcaps
object template manager
\shape default
 is implemented by 
\family typewriter
ely::ObjectTemplateManager
\family default
 class.
\end_layout

\begin_layout Quote
The private interface is made of:
\end_layout

\begin_layout Chapter
Game configuration file
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
game configuration file
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "chap:Game-configuration-file"

\end_inset


\end_layout

\begin_layout Standard
Game configuration file
\end_layout

\begin_layout Standard
Parameters' values are specified through a simple syntax, so to avoid complex
 parsing techniques, but allowing the use of C/C++ 
\family typewriter
string
\family default
 methods to interpret their meanings.
 
\end_layout

\begin_layout Standard
Usually a single That syntax follows this rules:
\end_layout

\begin_layout Section
Component's configuration parameters
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
component ! 
\shape up
configuration parameters
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sub:Components'-configuration-parame"

\end_inset


\end_layout

\begin_layout Standard
Almost all the 
\series bold
Component
\series default
s have 
\shape italic
configuration parameters
\shape default
 that are specified by the configuration file 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Game-configuration-file"

\end_inset

.
 These parameters are used to tweak and customize 
\series bold
Component
\series default
's internal state configuration at creation time.
 
\end_layout

\begin_layout Standard
Several internal state values can be set up only 
\series bold
Component
\series default
 at creation time (through the parameters) and cannot be changed during
 its lifetime, while others haven't this limitation, and can be modified
 through member functions.
\end_layout

\begin_layout Standard
All parameters have hard-coded 
\shape italic
default
\shape default
 values, which are used if not specified at creation time.
 The default is usually the 
\shape italic
null
\shape default
 value of the parameter's field of values: 
\family typewriter
0
\family default
 for numbers (floats, integers), empty string (
\family typewriter
''
\family default
) for strings etc\SpecialChar \ldots{}
.
 But some parameters must have a different default from null, otherwise
 the Component could fall back in an inconsistent behavior.
\end_layout

\begin_layout Standard
At Component creation time, parameters are specified through the 
\shape italic
game configuration file
\shape default
 (usually 
\shape italic
game.xml
\shape default
)
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Game-configuration-file"

\end_inset

.
\end_layout

\begin_layout Standard
Any Component parameter has these attributes:
\end_layout

\begin_layout Itemize

\shape italic
name
\shape default
: it is chosen as self-documenting as possible, usually referring to the
 underlying logics or native Component attributes
\end_layout

\begin_layout Itemize

\shape italic
type
\shape default
: a parameter can be of 
\shape italic
single
\shape default
 valued or 
\shape italic
multiple
\shape default
 valued
\end_layout

\begin_layout Itemize

\shape italic
default
\shape default
: a hard-coded value used if the value is not specified
\end_layout

\begin_layout Standard
In the 
\shape italic
API Documentation
\shape default
 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:API-Documentation"

\end_inset

 for each Component parameter are reported the 
\shape italic
name
\shape default
, the 
\shape italic
type
\shape default
, the 
\shape italic
default
\shape default
 (if different from null) value and a 
\shape italic
note
\shape default
 (optional) describing how its value should be specified in the configuration
 file and/or other informations.
\end_layout

\begin_layout Chapter
Game design
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
game ! design
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "chap:Game-design"

\end_inset


\end_layout

\begin_layout Section
Event callback functions
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
game ! event callback functions
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:Event-callback-functions"

\end_inset


\end_layout

\begin_layout Subsection
Object initialization functions
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
game ! Object initialization functions
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sub:Object-initialization-functions"

\end_inset


\end_layout

\begin_layout Subsection
State transition functions
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
game ! state transition functions
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sub:State-transition-functions"

\end_inset


\end_layout

\begin_layout Subsection
Instance update functions
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
game ! instance update functions
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sub:Instance-update-functions"

\end_inset


\end_layout

\begin_layout Chapter
Implementation details
\begin_inset CommandInset label
LatexCommand label
name "chap:Implementation-details"

\end_inset


\end_layout

\begin_layout Section
Singletons
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
singleton
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:Singletons"

\end_inset


\end_layout

\begin_layout Section
Smart pointers
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
smart pointer
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:Smart-pointers"

\end_inset


\end_layout

\begin_layout Section
Multi-threading
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
multi-threading
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:Multi-threading"

\end_inset


\end_layout

\begin_layout Chapter
API Documentation
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
API documentation
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "chap:API-Documentation"

\end_inset


\end_layout

\begin_layout Standard
API Documentation
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-1"

\end_inset

 Dickheiser, Michael: 
\shape italic
Game Programming Gems 6 First Edition
\shape default
.
 Charles River Media, 2006
\end_layout

\begin_layout Standard
\begin_inset CommandInset index_print
LatexCommand printindex
type "idx"

\end_inset


\end_layout

\end_body
\end_document
